# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

## THIS IS THE VAGRANTFILE FOR 'linux-anaconda-vm'

# install missing plugins without asking user permission
  ENV['VAGRANT_INSTALL_LOCAL_PLUGINS'] = "true"

# create a vm with username and timestamp appended (to avoid duplicate names)
  require 'date'
  username = ENV['USERNAME'] || ENV['USER']
  myDate = DateTime.now.strftime('%Y-%m-%d-%H.%M.%S')
  myhostname = "#{username.gsub(/\s/, "-")}-linux-anaconda-vm-#{myDate}"

Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-22.04"

  # install anaconda as user 'vagrant' (not root)
  $script = <<-SCRIPT
  cd /tmp ;
  curl -O https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh ;
  bash Anaconda3-2019.07-Linux-x86_64.sh -b ;
  /home/vagrant/anaconda3/bin/conda update conda ;
  /home/vagrant/anaconda3/bin/conda update anaconda ;
  /home/vagrant/anaconda3/bin/conda install jupyterlab pandas seaborn sympy beautifulsoup4 lxml html5lib pytables ;
  /home/vagrant/anaconda3/bin/conda install -c conda-forge pint ;
  /home/vagrant/anaconda3/bin/pip install modsimpy ;
  SCRIPT
  config.vm.provision "shell", inline: $script, privileged: false
  
  # create a script that sets anaconda3 as default python
  config.vm.provision "shell", inline: "> /etc/profile.d/set-default-python.sh", run: "always"
  config.vm.provision "shell", inline: "echo \"export PATH=/home/vagrant/anaconda3/bin:$PATH\" >> /etc/profile.d/set-default-python.sh", run: "always"
  
  # install extra packages & update repos
  config.vm.provision :shell, path: "install-extras.sh"

  # set port forwarding for jupyter notebook to work
  config.vm.network "forwarded_port", guest: 8888, host: 8888
  
  # set hostname based on username from line 16
  config.vm.hostname = "#{myhostname}"
  if Vagrant.has_plugin?("vagrant-timezone") ## sync the guest clock to host if timezone plugin is installed
    config.timezone.value = :host
  end
  config.vm.provider "virtualbox" do |v|
    v.name = "#{myhostname}"
  end

  config.trigger.after :up  do |updatePkgs|
    updatePkgs.warn = "Checking for software updates"
    updatePkgs.run_remote = {inline: "apt-get --with-new-pkgs upgrade -y"}
  end

  # create shared folder
  config.vm.synced_folder "./shared", "/shared", create: true

end
